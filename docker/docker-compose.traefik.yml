# Docker Compose file for deploying a built Pruvious container in a Docker Swarm cluster with Traefik as the load balancer
# Note: This configuration is based on onesrv.net's production setup and may require adjustments for your specific environment

version: '3'
services:
  nuxt:
    # Replace this with your built Pruvious Docker image
    # For instructions on building Docker images, visit: https://docs.docker.com/get-started/workshop/02_our_app/
    image: <REPLACE:your-docker-image>:latest
    restart: unless-stopped
    deploy:
      replicas: 1
      labels:
        # Traefik configuration for HTTP
        - traefik.http.routers.pruvious-http.rule=Host(`<yourdomain.com>`)
        - traefik.http.routers.pruvious-http.entrypoints=web

        # Traefik configuration for HTTPS
        - traefik.http.routers.pruvious.rule=Host(`<yourdomain.com>`)
        - traefik.http.routers.pruvious.entrypoints=websecure
        - traefik.http.routers.pruvious.tls
        # Specify the Let's Encrypt certificate resolver (change 'le' if your resolver has a different name)
        - traefik.http.routers.pruvious.tls.certResolver=le

        # Specify the port your Nuxt app is running on (default is 3000)
        - traefik.http.services.pruvious-service.loadbalancer.server.port=3000
        - traefik.constraint-label=traefik-public
        - traefik.enable=true
    environment:
      # Database connection string - adjust if necessary
      - NUXT_PRUVIOUS_DATABASE=postgresql://pruvious:pruvious@db:5432/pruvious
    volumes:
      - uploads:/app/uploads
    networks:
      - traefik-public
      - internal

  db:
    image: postgres:15-alpine
    restart: always
    # Uncomment the following line if you need to specify a custom PostgreSQL configuration file
    #command: ["postgres", "-c", "config_file=/var/lib/postgresql/data/postgresql.conf"]
    environment:
      - POSTGRES_USER=pruvious
      - POSTGRES_PASSWORD=pruvious
      - POSTGRES_DB=pruvious
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - db:/var/lib/postgresql/data/
    networks:
      - internal

networks:
  # External network for Traefik communication
  traefik-public:
    external: true
  # Internal network for service-to-service communication
  internal:

# Volume configuration
# IMPORTANT: Adjust these volume definitions according to your preferred volume driver
# If you're unsure, consider using the standard docker-compose.yml or refer to Docker documentation
volumes:
  db:
  uploads:
